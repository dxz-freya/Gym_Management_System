// <auto-generated />
using System;
using GymManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("GymManagement.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceptionistId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("SessionId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("GymManagement.Models.GymBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("BranchId");

                    b.ToTable("GymBranches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            Address = "123 Main St",
                            BranchName = "Downtown Gym",
                            ContactNumber = "123-456-7890"
                        },
                        new
                        {
                            BranchId = 2,
                            Address = "456 High St",
                            BranchName = "Uptown Gym",
                            ContactNumber = "987-654-3210"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.Property<int>("GymClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AvailableTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GymClassId");

                    b.HasIndex("AdminId");

                    b.HasIndex("TrainerId");

                    b.ToTable("GymClasses");

                    b.HasData(
                        new
                        {
                            GymClassId = 1,
                            AvailableTime = new DateTime(2025, 3, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ClassName = "Beginner Yoga",
                            Duration = 60,
                            TrainerId = 3
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GymManagement.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GymBranchBranchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.HasIndex("AdminId");

                    b.HasIndex("GymBranchBranchId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BranchId = 1,
                            Capacity = 20,
                            IsAvailable = true,
                            RoomName = "Yoga Room"
                        },
                        new
                        {
                            RoomId = 2,
                            BranchId = 2,
                            Capacity = 30,
                            IsAvailable = true,
                            RoomName = "Weightlifting Room"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GymClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceptionistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SessionDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SessionId");

                    b.HasIndex("AdminId");

                    b.HasIndex("GymClassId");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GymManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            JoinDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin User",
                            Password = "Admin@123",
                            Role = 0
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Admin", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("GymManagement.Models.Customer", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "jane@example.com",
                            JoinDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Jane Doe",
                            Password = "Customer@123",
                            Role = 3,
                            MembershipType = "Premium",
                            SubscriptionDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Receptionist", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GymBranchBranchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("GymBranchBranchId");

                    b.ToTable("Users", t =>
                        {
                            t.Property("BranchId")
                                .HasColumnName("Receptionist_BranchId");

                            t.Property("GymBranchBranchId")
                                .HasColumnName("Receptionist_GymBranchBranchId");
                        });

                    b.HasDiscriminator().HasValue("Receptionist");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "mike@example.com",
                            JoinDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mike Receptionist",
                            Password = "Receptionist@123",
                            Role = 1,
                            BranchId = 1,
                            IsAvailable = true,
                            Responsibilities = "Front Desk Management"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExperienceStarted")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GymBranchBranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("AdminId");

                    b.HasIndex("GymBranchBranchId");

                    b.HasDiscriminator().HasValue("Trainer");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "johntrainer@example.com",
                            JoinDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "John Trainer",
                            Password = "Trainer@123",
                            Role = 2,
                            BranchId = 1,
                            ExperienceStarted = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Specialization = "Yoga"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Booking", b =>
                {
                    b.HasOne("GymManagement.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("GymManagement.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId");

                    b.HasOne("GymManagement.Models.Session", "Session")
                        .WithMany("Bookings")
                        .HasForeignKey("SessionId");

                    b.Navigation("Customer");

                    b.Navigation("Receptionist");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.HasOne("GymManagement.Models.Admin", null)
                        .WithMany("GymClasses")
                        .HasForeignKey("AdminId");

                    b.HasOne("GymManagement.Models.Trainer", "Trainer")
                        .WithMany("GymClasses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymManagement.Models.Payment", b =>
                {
                    b.HasOne("GymManagement.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GymManagement.Models.Room", b =>
                {
                    b.HasOne("GymManagement.Models.Admin", null)
                        .WithMany("Rooms")
                        .HasForeignKey("AdminId");

                    b.HasOne("GymManagement.Models.GymBranch", null)
                        .WithMany("Rooms")
                        .HasForeignKey("GymBranchBranchId");
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.HasOne("GymManagement.Models.Admin", null)
                        .WithMany("Sessions")
                        .HasForeignKey("AdminId");

                    b.HasOne("GymManagement.Models.GymClass", "GymClass")
                        .WithMany("Sessions")
                        .HasForeignKey("GymClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId");

                    b.HasOne("GymManagement.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.Trainer", "Trainer")
                        .WithMany("Sessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymClass");

                    b.Navigation("Receptionist");

                    b.Navigation("Room");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymManagement.Models.Receptionist", b =>
                {
                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany("Receptionists")
                        .HasForeignKey("GymBranchBranchId");

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.HasOne("GymManagement.Models.Admin", null)
                        .WithMany("Trainers")
                        .HasForeignKey("AdminId");

                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany("Trainers")
                        .HasForeignKey("GymBranchBranchId");

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.GymBranch", b =>
                {
                    b.Navigation("Receptionists");

                    b.Navigation("Rooms");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GymManagement.Models.Admin", b =>
                {
                    b.Navigation("GymClasses");

                    b.Navigation("Rooms");

                    b.Navigation("Sessions");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("GymManagement.Models.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.Navigation("GymClasses");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
