<!-- Details.cshtml in GymManagement/Views/Book folder-->
@model List<Book>
@{
  int counter = 1;
}
<div class="d-flex justify-content-between align-items-center mb-3">
  <a href="@Url.Action("Create", "Book")" class="btn custom-btn">Create</a>

  <form method="get" action="@Url.Action("Details", "Book")" class="input-group"
    style="width: 300px; position: relative;">
    <input type="text" id="searchQuery" name="searchQuery" class="form-control" placeholder="Search books by title..."
      value="@Context.Request.Query["searchQuery"]" />
    <span class="position-absolute translate-middle-y me-3" id="clearSearchBtn" onclick="clearSearch()" style="cursor: pointer; position: absolute; right: 22%; top: 50%; transform: translateY(-50%); 
               display: none; z-index: 10">
      <i class="bi bi-x-circle fs-5 text-secondary"></i>
    </span>

    <button type="submit" class="btn custom-btn">Search</button>
  </form>
</div>



<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Title</th>
      @* <th>Quantity</th> *@
      <th>Author Id</th>
      <th>LibraryBranch Id</th>
      <th>Methods</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var book in Model)
    {
      <tr>
        <td>@counter</td>
        <td>@book.Title</td>
        @* <td>@{
          int totalQuantity = 0;
          if (ViewBag.BookTotalQuantities != null && ViewBag.BookTotalQuantities.ContainsKey(book.BookId))
          {
            totalQuantity = ViewBag.BookTotalQuantities[book.BookId];
          }
        }
        @totalQuantity</td> *@
        <td>@book.AuthorId</td>
        <td>@book.LibraryBranchId</td>
        <td>
          <a href="@Url.Action("Edit", "Book", new { id = book.BookId })" class="custom-link">Edit</a>
          <a href="#" class="custom-delete delete-button" data-book-id="@book.BookId">Delete</a>
          @* <button class="btn custom-btn borrow-btn" data-book-id="@book.BookId"
          data-branch-id="@book.LibraryBranchId">Borrow</button>
        <button class="btn custom-btn return-btn" data-book-id="@book.BookId">Return</button> *@
        </td>

      </tr>
      counter++;
    }
  </tbody>
</table>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    let searchInput = document.getElementById("searchQuery");
    let clearBtn = document.getElementById("clearSearchBtn");

    if (!searchInput || !clearBtn) {
      console.error("searchQuery or clearSearchBtn is not found");
      return;
    }
    searchInput.addEventListener("input", function () {
      if (searchInput.value.trim() !== "") {
        clearBtn.style.display = "block";
      } else {
        clearBtn.style.display = "none";
      }
    });

    window.clearSearch = function () {
      searchInput.value = "";
      clearBtn.style.display = "none";
      searchInput.focus();
      window.location.href = window.location.pathname;
    };

    clearBtn.addEventListener("click", function (event) {
      event.preventDefault();
      clearSearch();
    });

    if (searchInput.value.trim() !== "") {
      clearBtn.style.display = "block";
    }

    document.querySelectorAll(".delete-button").forEach(button => {
      button.addEventListener("click", function () {
        let bookId = this.getAttribute("data-book-id");

        if (!bookId) {
          alert("Error: No book ID provided.");
          return;
        }

        if (confirm("Are you sure you want to delete this book?")) {
          fetch(`/Book/Delete`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ id: parseInt(bookId) })
          })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                alert("Book deleted successfully!");
                window.location.reload();
              } else {
                alert("Error: " + data.message);
              }
            })
            .catch(error => console.error("Error:", error));
        }
      });
    });
    document.querySelectorAll(".borrow-btn").forEach(button => {
      button.addEventListener("click", function () {
        let bookId = this.getAttribute("data-book-id");
        let branchId = this.getAttribute("data-branch-id");

        if (!bookId || !branchId) {
          alert("Error: Missing book or branch ID.");
          return;
        }

        fetch(`/BookInventory/BorrowBook?bookId=${bookId}&libraryBranchId=${branchId}`, {
          method: "POST",
          headers: {
            "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]').value
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert("Borrowed successfully!");
              window.location.reload();
            } else {
              alert("Error: " + data.message);
            }
          })
          .catch(error => console.error("Error:", error));
      });
    });

    document.querySelectorAll(".return-btn").forEach(button => {
      button.addEventListener("click", function () {
        let bookId = this.getAttribute("data-book-id");

        if (!bookId) {
          alert("Error: Missing book ID.");
          return;
        }

        fetch(`/BookInventory/ReturnBook?bookId=${bookId}`, {
          method: "POST",
          headers: {
            "X-CSRF-TOKEN": document.querySelector('input[name="__RequestVerificationToken"]').value
          }
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              alert("Returned successfully!");
              window.location.reload();
            } else {
              alert("Error: " + data.message);
            }
          })
          .catch(error => console.error("Error:", error));
      });
    });
  });

</script>
