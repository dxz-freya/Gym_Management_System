@model PagedSessionViewModel
@using GymManagement.Models
@using GymManagement.ViewModels
@{
    ViewData["Title"] = "Book a Session";
    int currentPage = Model.CurrentPage;
    int totalPages = Model.TotalPages;
    int maxPagesToShow = 5;
    int startPage = Math.Max(1, currentPage - 2);
    int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
    if (endPage - startPage < maxPagesToShow - 1)
    {
        startPage = Math.Max(1, endPage - maxPagesToShow + 1);
    }
}

<style>
    .session-card {
        background-color: #1a1a1a;
        border: 1px solid #f36100;
        border-radius: 12px;
        color: white;
        height: 100%;
    }

    .session-card h5 {
        color: #f36100;
        font-weight: bold;
    }

    .btn-orange {
        background-color: #f36100;
        color: #000;
        border: none;
    }

    .btn-orange:hover {
        background-color: #ff9900;
        color: #000;
    }

    .btn-booked {
        background-color: #434242;
        color: #fff;
        border: none;
        cursor: default;
    }
    .page-link {
        background-color: #1a1a1a;
        color: #f36100;
        border: 1px solid #f36100;
    }

    .pagination .active .page-link {
        background-color: #f36100;
        color: #000;
        border-color: #f36100;
    }

    .pagination .page-link:hover {
        background-color: #f36100;
        color: #000;
    }

    .page-item.disabled .page-link {
        background-color: #1a1a1a;
        color: #666 !important;
        border: 1px solid #333;
        pointer-events: none;
    }

    .pagination {
        flex-wrap: wrap;
        gap: 5px;
    }

    input.form-control {
        background-color: #222;
        color: #fff;
        border: 1px solid #f36100;
    }
    .go-page-input {
        width: 80px;
        background-color: #1a1a1a;
        color: #f36100;
        border: 1px solid #f36100;
        border-radius: 6px;
        padding: 3px 6px;
    }

    .go-page-input::placeholder {
        color: #888;
    }

    .go-page-input:focus {
        outline: none;
        box-shadow: none;
        border-color: #ff9900;
    }
    @@media (max-width: 576px) {
        .pagination {
            justify-content: center;
        }

        .pagination .page-link {
            font-size: 0.75rem;
            padding: 0.2rem 0.4rem;
        }
    }


</style>

<div id="liveAlertPlaceholder" style="position: fixed; top: 80px; left: 50%; transform: translateX(-50%); z-index: 9999; width: auto; max-width: 600px;"></div>

<h2 class="text-warning mb-4">Available Sessions</h2>

<div class="row">
    @foreach (var session in Model.Sessions)
    {
        var isBooked = session.IsBookedByCurrentUser;
        <div class="col-md-4 mb-4 d-flex">
            <div class="card session-card flex-fill">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@session.SessionName</h5>
                    <p class="card-text mb-4">
                        <strong>Trainer:</strong> @session.Trainer.Name <br />
                        <strong>Date & Time:</strong> @session.SessionDateTime.ToString("MMM d, yyyy h:mm tt", System.Globalization.CultureInfo.InvariantCulture)
                    </p>
                    @if (isBooked)
                    {
                        <button type="button" class="btn btn-booked" disabled>Booked</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-orange" onclick="bookSession(@session.SessionId, this)">Book</button>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Pagination Navigation -->
<nav aria-label="Session pagination">
    <div class="d-flex justify-content-center flex-wrap align-items-center gap-2">
        <ul class="pagination m-0">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" asp-action="BookSession" asp-route-page="@(Model.CurrentPage - 1)">Previous</a>
            </li>

            @if (startPage > 1)
            {
                <li class="page-item"><a class="page-link" asp-action="BookSession" asp-route-page="1">1</a></li>
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }

            @for (int i = startPage; i <= endPage; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-action="BookSession" asp-route-page="@i">@i</a>
                </li>
            }

            @if (endPage < totalPages)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
                <li class="page-item"><a class="page-link" asp-action="BookSession" asp-route-page="@Model.TotalPages">@Model.TotalPages</a></li>
            }

            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" asp-action="BookSession" asp-route-page="@(Model.CurrentPage + 1)">Next</a>
            </li>
        </ul>

        <!-- Jump to Page Form -->
        <form asp-action="BookSession" method="get" class="d-flex align-items-center gap-2" style="margin:1rem">
            <input type="number" name="page" min="1" max="@Model.TotalPages"
                   class="form-control form-control-sm go-page-input"
                   placeholder="Page #" />
            <button class="btn btn-orange btn-sm" style="margin-left:0.2rem" type="submit">Go</button>
        </form>
    </div>
</nav>

@section Scripts {
<script>
   function bookSession(sessionId, button) {
        fetch('/Customer/MarkBookingPending', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ sessionId })
        })
        .then(async response => {
            if (response.ok) {
                showAlert("Session booked success pending!", "success");
                button.classList.remove('btn-orange');
                button.classList.add('btn-booked');
                button.innerText = "Booked";
                button.disabled = true;
            } else {
                const errorData = await response.json();
                console.error("Server error:", errorData);
                showAlert("Booking failed: " + (errorData.error || "Unknown error"), "danger");
            }
        })
        .catch(error => {
            console.error('Request error:', error);
            showAlert("Something went wrong!", "danger");
        });
    }

    function showAlert(message, type) {
        const wrapper = document.createElement('div');
        wrapper.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show shadow" role="alert">
            ${message}
        </div>
        `;
        const placeholder = document.getElementById('liveAlertPlaceholder');
        placeholder.innerHTML = ''; 
        placeholder.appendChild(wrapper);

        setTimeout(() => {
            wrapper.remove(); 
        }, 4000);
    }

</script>
}

