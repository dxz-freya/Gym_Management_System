// <auto-generated />
using System;
using GymManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250412111034_AddProfileImageToUser")]
    partial class AddProfileImageToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("GymManagement.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceptionistId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("GymManagement.Models.GymBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("BranchId");

                    b.ToTable("GymBranches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            Address = "101 Main St",
                            BranchName = "Downtown Gym",
                            ContactNumber = "555-1001"
                        },
                        new
                        {
                            BranchId = 2,
                            Address = "202 High St",
                            BranchName = "Uptown Gym",
                            ContactNumber = "555-2002"
                        },
                        new
                        {
                            BranchId = 3,
                            Address = "303 East Ave",
                            BranchName = "Eastside Gym",
                            ContactNumber = "555-3003"
                        },
                        new
                        {
                            BranchId = 4,
                            Address = "404 West Blvd",
                            BranchName = "Westside Gym",
                            ContactNumber = "555-4004"
                        },
                        new
                        {
                            BranchId = 5,
                            Address = "505 Central Rd",
                            BranchName = "Central Gym",
                            ContactNumber = "555-5005"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.Property<int>("GymClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AvailableTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GymClassId");

                    b.HasIndex("TrainerId");

                    b.ToTable("GymClasses");
                });

            modelBuilder.Entity("GymManagement.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GymManagement.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.HasIndex("BranchId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BranchId = 1,
                            Capacity = 44,
                            IsAvailable = true,
                            RoomName = "Recovery Room"
                        },
                        new
                        {
                            RoomId = 2,
                            BranchId = 1,
                            Capacity = 21,
                            IsAvailable = true,
                            RoomName = "Mobility Area"
                        },
                        new
                        {
                            RoomId = 3,
                            BranchId = 1,
                            Capacity = 35,
                            IsAvailable = true,
                            RoomName = "Endurance Zone"
                        },
                        new
                        {
                            RoomId = 4,
                            BranchId = 1,
                            Capacity = 32,
                            IsAvailable = true,
                            RoomName = "Functional Room"
                        },
                        new
                        {
                            RoomId = 5,
                            BranchId = 1,
                            Capacity = 47,
                            IsAvailable = true,
                            RoomName = "Dance Studio"
                        },
                        new
                        {
                            RoomId = 6,
                            BranchId = 2,
                            Capacity = 40,
                            IsAvailable = true,
                            RoomName = "Endurance Zone"
                        },
                        new
                        {
                            RoomId = 7,
                            BranchId = 2,
                            Capacity = 30,
                            IsAvailable = true,
                            RoomName = "Spin Studio"
                        },
                        new
                        {
                            RoomId = 8,
                            BranchId = 2,
                            Capacity = 40,
                            IsAvailable = true,
                            RoomName = "Cardio Room"
                        },
                        new
                        {
                            RoomId = 9,
                            BranchId = 2,
                            Capacity = 49,
                            IsAvailable = true,
                            RoomName = "Dance Studio"
                        },
                        new
                        {
                            RoomId = 10,
                            BranchId = 2,
                            Capacity = 33,
                            IsAvailable = true,
                            RoomName = "Strength Studio"
                        },
                        new
                        {
                            RoomId = 11,
                            BranchId = 3,
                            Capacity = 48,
                            IsAvailable = true,
                            RoomName = "Stretch Zone"
                        },
                        new
                        {
                            RoomId = 12,
                            BranchId = 3,
                            Capacity = 20,
                            IsAvailable = true,
                            RoomName = "Crossfit Zone"
                        },
                        new
                        {
                            RoomId = 13,
                            BranchId = 3,
                            Capacity = 36,
                            IsAvailable = true,
                            RoomName = "Cardio Room"
                        },
                        new
                        {
                            RoomId = 14,
                            BranchId = 3,
                            Capacity = 32,
                            IsAvailable = true,
                            RoomName = "Strength Studio"
                        },
                        new
                        {
                            RoomId = 15,
                            BranchId = 3,
                            Capacity = 26,
                            IsAvailable = true,
                            RoomName = "Functional Room"
                        },
                        new
                        {
                            RoomId = 16,
                            BranchId = 4,
                            Capacity = 49,
                            IsAvailable = true,
                            RoomName = "HIIT Area"
                        },
                        new
                        {
                            RoomId = 17,
                            BranchId = 4,
                            Capacity = 29,
                            IsAvailable = true,
                            RoomName = "Dance Studio"
                        },
                        new
                        {
                            RoomId = 18,
                            BranchId = 4,
                            Capacity = 39,
                            IsAvailable = true,
                            RoomName = "Mobility Area"
                        },
                        new
                        {
                            RoomId = 19,
                            BranchId = 4,
                            Capacity = 45,
                            IsAvailable = true,
                            RoomName = "Yoga Room"
                        },
                        new
                        {
                            RoomId = 20,
                            BranchId = 4,
                            Capacity = 50,
                            IsAvailable = true,
                            RoomName = "Stretch Zone"
                        },
                        new
                        {
                            RoomId = 21,
                            BranchId = 5,
                            Capacity = 41,
                            IsAvailable = true,
                            RoomName = "Cardio Room"
                        },
                        new
                        {
                            RoomId = 22,
                            BranchId = 5,
                            Capacity = 24,
                            IsAvailable = true,
                            RoomName = "Weight Room"
                        },
                        new
                        {
                            RoomId = 23,
                            BranchId = 5,
                            Capacity = 29,
                            IsAvailable = true,
                            RoomName = "Mobility Area"
                        },
                        new
                        {
                            RoomId = 24,
                            BranchId = 5,
                            Capacity = 44,
                            IsAvailable = true,
                            RoomName = "Recovery Room"
                        },
                        new
                        {
                            RoomId = 25,
                            BranchId = 5,
                            Capacity = 42,
                            IsAvailable = true,
                            RoomName = "Endurance Zone"
                        });
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GymClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceptionistId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SessionDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.HasIndex("GymClassId");

                    b.HasIndex("ReceptionistId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GymManagement.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymManagement.Models.Customer", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<int>("GymBranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MembershipExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("TEXT");

                    b.HasIndex("GymBranchId");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("GymManagement.Models.Receptionist", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasIndex("BranchId");

                    b.ToTable("AspNetUsers", t =>
                        {
                            t.Property("BranchId")
                                .HasColumnName("Receptionist_BranchId");
                        });

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.HasBaseType("GymManagement.Models.User");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExperienceStarted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("BranchId");

                    b.HasDiscriminator().HasValue("Trainer");
                });

            modelBuilder.Entity("GymManagement.Models.Booking", b =>
                {
                    b.HasOne("GymManagement.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId");

                    b.HasOne("GymManagement.Models.Session", "Session")
                        .WithMany("Bookings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Receptionist");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.HasOne("GymManagement.Models.Trainer", "Trainer")
                        .WithMany("GymClasses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("GymManagement.Models.Payment", b =>
                {
                    b.HasOne("GymManagement.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GymManagement.Models.Room", b =>
                {
                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany("Rooms")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.HasOne("GymManagement.Models.GymClass", "GymClass")
                        .WithMany("Sessions")
                        .HasForeignKey("GymClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.Receptionist", "Receptionist")
                        .WithMany()
                        .HasForeignKey("ReceptionistId");

                    b.HasOne("GymManagement.Models.Room", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.Trainer", "Trainer")
                        .WithMany("Sessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymClass");

                    b.Navigation("Receptionist");

                    b.Navigation("Room");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManagement.Models.Customer", b =>
                {
                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany()
                        .HasForeignKey("GymBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.Receptionist", b =>
                {
                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany("Receptionists")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.HasOne("GymManagement.Models.GymBranch", "GymBranch")
                        .WithMany("Trainers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GymBranch");
                });

            modelBuilder.Entity("GymManagement.Models.GymBranch", b =>
                {
                    b.Navigation("Receptionists");

                    b.Navigation("Rooms");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("GymManagement.Models.GymClass", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagement.Models.Room", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GymManagement.Models.Session", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("GymManagement.Models.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GymManagement.Models.Trainer", b =>
                {
                    b.Navigation("GymClasses");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
